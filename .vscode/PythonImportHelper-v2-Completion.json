[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Calculator",
        "importPath": "pkg.calculator",
        "description": "pkg.calculator",
        "isExtraImport": true,
        "detail": "pkg.calculator",
        "documentation": {}
    },
    {
        "label": "Calculator",
        "importPath": "pkg.calculator",
        "description": "pkg.calculator",
        "isExtraImport": true,
        "detail": "pkg.calculator",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "pkg.render",
        "description": "pkg.render",
        "isExtraImport": true,
        "detail": "pkg.render",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "MAX_FILE_CONTENT_LENGTH",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "google.genai",
        "description": "google.genai",
        "isExtraImport": true,
        "detail": "google.genai",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "google.genai",
        "description": "google.genai",
        "isExtraImport": true,
        "detail": "google.genai",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "google.genai",
        "description": "google.genai",
        "isExtraImport": true,
        "detail": "google.genai",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "google.genai",
        "description": "google.genai",
        "isExtraImport": true,
        "detail": "google.genai",
        "documentation": {}
    },
    {
        "label": "types",
        "importPath": "google.genai",
        "description": "google.genai",
        "isExtraImport": true,
        "detail": "google.genai",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "genai",
        "importPath": "google",
        "description": "google",
        "isExtraImport": true,
        "detail": "google",
        "documentation": {}
    },
    {
        "label": "schema_get_files_info",
        "importPath": "functions.get_files_info",
        "description": "functions.get_files_info",
        "isExtraImport": true,
        "detail": "functions.get_files_info",
        "documentation": {}
    },
    {
        "label": "get_files_info",
        "importPath": "functions.get_files_info",
        "description": "functions.get_files_info",
        "isExtraImport": true,
        "detail": "functions.get_files_info",
        "documentation": {}
    },
    {
        "label": "get_files_info",
        "importPath": "functions.get_files_info",
        "description": "functions.get_files_info",
        "isExtraImport": true,
        "detail": "functions.get_files_info",
        "documentation": {}
    },
    {
        "label": "schema_get_file_content",
        "importPath": "functions.get_file_content",
        "description": "functions.get_file_content",
        "isExtraImport": true,
        "detail": "functions.get_file_content",
        "documentation": {}
    },
    {
        "label": "get_file_content",
        "importPath": "functions.get_file_content",
        "description": "functions.get_file_content",
        "isExtraImport": true,
        "detail": "functions.get_file_content",
        "documentation": {}
    },
    {
        "label": "get_file_content",
        "importPath": "functions.get_file_content",
        "description": "functions.get_file_content",
        "isExtraImport": true,
        "detail": "functions.get_file_content",
        "documentation": {}
    },
    {
        "label": "schema_run_python_file",
        "importPath": "functions.run_python",
        "description": "functions.run_python",
        "isExtraImport": true,
        "detail": "functions.run_python",
        "documentation": {}
    },
    {
        "label": "run_python_file",
        "importPath": "functions.run_python",
        "description": "functions.run_python",
        "isExtraImport": true,
        "detail": "functions.run_python",
        "documentation": {}
    },
    {
        "label": "run_python_file",
        "importPath": "functions.run_python",
        "description": "functions.run_python",
        "isExtraImport": true,
        "detail": "functions.run_python",
        "documentation": {}
    },
    {
        "label": "schema_write_file",
        "importPath": "functions.write_file",
        "description": "functions.write_file",
        "isExtraImport": true,
        "detail": "functions.write_file",
        "documentation": {}
    },
    {
        "label": "write_file",
        "importPath": "functions.write_file",
        "description": "functions.write_file",
        "isExtraImport": true,
        "detail": "functions.write_file",
        "documentation": {}
    },
    {
        "label": "write_file",
        "importPath": "functions.write_file",
        "description": "functions.write_file",
        "isExtraImport": true,
        "detail": "functions.write_file",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"ai-agent-with-python\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"ai-agent-with-python\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"ai-agent-with-python\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"ai-agent-with-python\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"ai-agent-with-python\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.9/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "Calculator",
        "kind": 6,
        "importPath": "calculator.pkg.calculator",
        "description": "calculator.pkg.calculator",
        "peekOfCode": "class Calculator:\n    def __init__(self):\n        self.operators = {\n            \"+\": lambda a, b: a + b,\n            \"-\": lambda a, b: a - b,\n            \"*\": lambda a, b: a * b,\n            \"/\": lambda a, b: a / b,\n        }\n        self.precedence = {\n            \"+\": 2,",
        "detail": "calculator.pkg.calculator",
        "documentation": {}
    },
    {
        "label": "render",
        "kind": 2,
        "importPath": "calculator.pkg.render",
        "description": "calculator.pkg.render",
        "peekOfCode": "def render(expression, result):\n    if isinstance(result, float) and result.is_integer():\n        result_str = str(int(result))\n    else:\n        result_str = str(result)\n    box_width = max(len(expression), len(result_str)) + 4\n    box = []\n    box.append(\"┌\" + \"─\" * box_width + \"┐\")\n    box.append(\n        \"│\" + \" \" * 2 + expression + \" \" * (box_width - len(expression) - 2) + \"│\"",
        "detail": "calculator.pkg.render",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "calculator.main",
        "description": "calculator.main",
        "peekOfCode": "def main():\n    calculator = Calculator()\n    if len(sys.argv) <= 1:\n        print(\"Calculator App\")\n        print('Usage: python main.py \"<expression>\"')\n        print('Example: python main.py \"3 + 5\"')\n        return\n    expression = \" \".join(sys.argv[1:])\n    try:\n        result = calculator.evaluate(expression)",
        "detail": "calculator.main",
        "documentation": {}
    },
    {
        "label": "TestCalculator",
        "kind": 6,
        "importPath": "calculator.tests",
        "description": "calculator.tests",
        "peekOfCode": "class TestCalculator(unittest.TestCase):\n    def setUp(self):\n        self.calculator = Calculator()\n    def test_addition(self):\n        result = self.calculator.evaluate(\"3 + 5\")\n        self.assertEqual(result, 8)\n    def test_subtraction(self):\n        result = self.calculator.evaluate(\"10 - 4\")\n        self.assertEqual(result, 6)\n    def test_multiplication(self):",
        "detail": "calculator.tests",
        "documentation": {}
    },
    {
        "label": "get_file_content",
        "kind": 2,
        "importPath": "functions.get_file_content",
        "description": "functions.get_file_content",
        "peekOfCode": "def get_file_content(working_directory, file_path):\n    try:\n        # Normalize paths\n        working_directory = os.path.abspath(working_directory)\n        file_path = os.path.abspath(os.path.join(working_directory, file_path))\n        # Validate boundary\n        if not file_path.startswith(working_directory):\n            return f'Error: Cannot read \"{file_path}\" as it is outside the permitted working directory'\n        # Check if file exists\n        if not os.path.isfile(file_path):",
        "detail": "functions.get_file_content",
        "documentation": {}
    },
    {
        "label": "schema_get_file_content",
        "kind": 5,
        "importPath": "functions.get_file_content",
        "description": "functions.get_file_content",
        "peekOfCode": "schema_get_file_content = types.FunctionDeclaration(\n    name=\"get_file_content\",\n    description=\"Reads the contents of a file, constrained to the working directory.\",\n    parameters=types.Schema(\n        type=types.Type.OBJECT,\n        properties={\n            \"file_path\": types.Schema(\n                type=types.Type.STRING,\n                description=\"The path to the file to read, relative to the working directory.\"\n            ),",
        "detail": "functions.get_file_content",
        "documentation": {}
    },
    {
        "label": "get_files_info",
        "kind": 2,
        "importPath": "functions.get_files_info",
        "description": "functions.get_files_info",
        "peekOfCode": "def get_files_info(working_directory, directory=\".\"):\n    try:\n        # Normalize paths\n        working_directory = os.path.abspath(working_directory)\n        target_path = os.path.abspath(os.path.join(working_directory, directory))\n        # Validate boundary\n        if not target_path.startswith(working_directory):\n            return f'Error: Cannot list \"{directory}\" as it is outside the permitted working directory'\n        # Validate it's a directory\n        if not os.path.isdir(target_path):",
        "detail": "functions.get_files_info",
        "documentation": {}
    },
    {
        "label": "schema_get_files_info",
        "kind": 5,
        "importPath": "functions.get_files_info",
        "description": "functions.get_files_info",
        "peekOfCode": "schema_get_files_info = types.FunctionDeclaration(\n    name=\"get_files_info\",\n    description=\"Lists files in the specified directory along with their sizes, constrained to the working directory.\",\n    parameters=types.Schema(\n        type=types.Type.OBJECT,\n        properties={\n            \"directory\": types.Schema(\n                type=types.Type.STRING,\n                description=\"The directory to list files from, relative to the working directory. If not provided, lists files in the working directory itself.\",\n            ),",
        "detail": "functions.get_files_info",
        "documentation": {}
    },
    {
        "label": "run_python_file",
        "kind": 2,
        "importPath": "functions.run_python",
        "description": "functions.run_python",
        "peekOfCode": "def run_python_file(working_directory, file_path, args=[]):\n    try:\n        # Normalize paths\n        working_directory = os.path.abspath(working_directory)\n        absolute_file_path = os.path.abspath(os.path.join(working_directory, file_path))\n        # Validate boundary\n        if not absolute_file_path.startswith(working_directory):\n            return f'Cannot execute \"{file_path}\" as it is outside the permitted working directory'\n        # Check if file exists\n        if not os.path.isfile(absolute_file_path):",
        "detail": "functions.run_python",
        "documentation": {}
    },
    {
        "label": "schema_run_python_file",
        "kind": 5,
        "importPath": "functions.run_python",
        "description": "functions.run_python",
        "peekOfCode": "schema_run_python_file = types.FunctionDeclaration(\n    name=\"run_python_file\",\n    description=\"Executes a Python file with optional arguments, constrained to the working directory.\",\n    parameters=types.Schema(\n        type=types.Type.OBJECT,\n        properties={\n            \"file_path\": types.Schema(\n                type=types.Type.STRING,\n                description=\"The path to the Python file to execute, relative to the working directory.\"\n            ),",
        "detail": "functions.run_python",
        "documentation": {}
    },
    {
        "label": "write_file",
        "kind": 2,
        "importPath": "functions.write_file",
        "description": "functions.write_file",
        "peekOfCode": "def write_file(working_directory, file_path, content):\n    try:\n        # Normalize paths\n        working_directory = os.path.abspath(working_directory)\n        file_path = os.path.abspath(os.path.join(working_directory, file_path))\n        # Validate boundary\n        if not file_path.startswith(working_directory):\n            return f'Error: Cannot write to \"{file_path}\" as it is outside the permitted working directory'\n        # Create directory if it doesn't exist\n        directory = os.path.dirname(file_path)",
        "detail": "functions.write_file",
        "documentation": {}
    },
    {
        "label": "schema_write_file",
        "kind": 5,
        "importPath": "functions.write_file",
        "description": "functions.write_file",
        "peekOfCode": "schema_write_file = types.FunctionDeclaration(\n    name=\"write_file\",\n    description=\"Writes or overwrites a file with the given content, constrained to the working directory.\",\n    parameters=types.Schema(\n        type=types.Type.OBJECT,\n        properties={\n            \"file_path\": types.Schema(\n                type=types.Type.STRING,\n                description=\"The path to the file to write, relative to the working directory.\"\n            ),",
        "detail": "functions.write_file",
        "documentation": {}
    },
    {
        "label": "MAX_FILE_CONTENT_LENGTH",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "MAX_FILE_CONTENT_LENGTH = 10000",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "call_function",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def call_function(function_call_part, verbose=False):\n    \"\"\"Handle the abstract task of calling one of our four functions.\"\"\"\n    function_name = function_call_part.name\n    function_args = function_call_part.args\n    if verbose:\n        print(f\"Calling function: {function_call_part.name}({function_call_part.args})\")\n    else:\n        print(f\"Calling function: {function_call_part.name}\")\n    # Add working_directory to the arguments\n    function_args[\"working_directory\"] = \"./calculator\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    load_dotenv()\n    api_key = os.environ.get(\"GEMINI_API_KEY\")\n    client = genai.Client(api_key=api_key)\n    # Parse command line arguments\n    args = sys.argv[1:]\n    verbose = \"--verbose\" in args\n    user_prompt = args[0] if args[0] != \"--verbose\" else args[1]\n    # Initialize messages list with user prompt\n    messages = [",
        "detail": "main",
        "documentation": {}
    }
]